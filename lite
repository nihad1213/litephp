#!/usr/bin/env php
<?php

/*
|----------------------------------------------------------------------
| Lightweight CLI Tool for PHP Server & Custom Commands
|----------------------------------------------------------------------
| This script provides a simple command-line interface (CLI) for managing
| various PHP development tasks. It currently supports the `start` command,
| which launches a PHP built-in server, but additional commands can be easily
| added for other development tasks.
|
| Commands can be run with the following format:
| 
| php lite <command>
|
| Created by: Nihad Namatli
|----------------------------------------------------------------------
*/

/*
|----------------------------------------------------------------------
| Change the Current Working Directory
|----------------------------------------------------------------------
| Ensures the script always runs from the directory where it is located.
| This is useful for resolving relative paths such as 'api', ensuring
| consistency when the script is run from different locations.
*/
chdir(__DIR__);

/*
|----------------------------------------------------------------------
| Get Command-Line Arguments
|----------------------------------------------------------------------
| The first argument (`$argv[1]`) will determine which command to execute.
| If no command is passed, the script will display a list of available 
| commands.
*/
$command = $argv[1] ?? null;

/*
|----------------------------------------------------------------------
| Switch on Command
|----------------------------------------------------------------------
| Depending on the command passed, the script will call 
| the corresponding function.
*/
switch ($command) {
    case 'start':
        /*
        |------------------------------------------------------------------
        | Start PHP Built-in Server
        |------------------------------------------------------------------
        | This command launches the built-in PHP development server, serving 
        | files from the 'api' directory.Once the server is started, the user
        | is prompted with instructions to stop it using Ctrl+C.
        */
        echo "Starting the server at http://localhost:8000...\n";
        echo "Press Ctrl+C to stop the server.\n\n";

        $cmd = 'php -S localhost:8000 -t api'; // Modify this path if needed
        passthru($cmd);
        break;

    case 'key:generate':
        /*
        |------------------------------------------------------------------
        | Generate a New JWT_SECRET Key in .enf file
        |------------------------------------------------------------------
        | This command generates a new JWT_SECRET key and outputs it to the 
        | console. The key is typically used for encryption and security 
        | purposes in PHP applications.
        */
        $envFile = __DIR__ . '/.env';

        // Check if .env file exists
        if (!file_exists($envFile)) {
            echo ".env file not found. Run: cp .env.example .env\n";
            return;
        }

        // Read current contents of .env
        $envContent = file_get_contents($envFile);

        // Check if JWT_SECRET already exists
        if (preg_match('/^JWT_SECRET\s*=\s*(.+)/m', $envContent, $matches)) {
            $existingKey = $matches[1];

            echo "JWT_SECRET is already defined: $existingKey\n";
            echo "Do you want to overwrite it? (yes/no): ";
            $handle = fopen ("php://stdin","r");
            $line = trim(fgets($handle));

            if (strtolower($line) !== 'yes') {
                echo "Aborted. JWT_SECRET not changed.\n";
                return;
            }
            fclose($handle);
        }

        // Generate a new JWT secret
        $key = bin2hex(random_bytes(32));

        // Update or insert JWT_SECRET
        if (preg_match('/^JWT_SECRET\s*=.*/m', $envContent)) {
            $envContent = preg_replace('/^JWT_SECRET\s*=.*/m', 'JWT_SECRET=' . $key, $envContent);
        } else {
            $envContent .= "\nJWT_SECRET=" . $key . "\n";
        }

        // Save updated contents to .env
        file_put_contents($envFile, $envContent);

        echo "JWT_SECRET updated successfully!\n";
        echo "New key: $key\n";

        break;
    
    case 'create:controller':
        /*
        |------------------------------------------------------------------
        | Create a New Controller File
        |------------------------------------------------------------------
        | This command scaffolds a new controller in the 'controllers' folder 
        | with a basic structure. It ensures the file doesn't already exist.
        |
        | Usage:
        | php lite create:controller TestController
        */
        $controllerName = $argv[2] ?? null;
    
        if (!$controllerName) {
            echo "Error: You must specify a controller name.\n";
            echo "Example: php lite create:controller TaskController\n";
            return;
        }
    
        // Ensure the controller ends with 'Controller'
        if (!str_ends_with($controllerName, 'Controller')) {
            $controllerName .= 'Controller';
        }
    
        $controllersDir = __DIR__ . '/controllers';
        $controllerFile = "$controllersDir/{$controllerName}.php";
    
        if (!file_exists($controllersDir)) {
            mkdir($controllersDir, 0755, true);
        }
    
        if (file_exists($controllerFile)) {
            echo "Error: Controller '$controllerName' already exists.\n";
            return;
        }
    
        // Generate boilerplate controller content
        $content = <<<PHP
        <?php
        require_once __DIR__ . "/../bootstrap.php";
            
        class {$controllerName} extends BaseController
        {
            /*
            * Constructor
            * Injects the related gateway class for DB operations.
            */
            public function __construct(private /*GatewayClass*/ \$gateway) {}
            
            /*
            * Main handler for incoming HTTP requests.
            * Determines action based on HTTP method and optional ID.
            */
            public function processRequest(string \$method, ?string \$id): void
            {
                if (\$id === null) {
                    if (\$method == "GET") {
                        echo json_encode(\$this->gateway->getAll());
                    } else if (\$method == "POST") {
                        \$data = \$this->getJsonInput();
                        \$errors = \$this->getValidationErrors(\$data);
            
                        if (!empty(\$errors)) {
                            \$this->respondUnprocessableEntity(\$errors);
                            return;
                        }
            
                        \$id = \$this->gateway->create(\$data);
                        \$this->respondCreated(\$id);
                    } else {
                        \$this->respondMethodNotAllowed("POST, GET");
                    }
                } else {
                    \$resource = \$this->gateway->get(\$id);
            
                    if (!\$resource) {
                        \$this->respondNotFound(\$id);
                        return;
                    }
            
                    switch (\$method) {
                        case "GET":
                            echo json_encode(\$resource);
                            break;
                        
                        case "PATCH":
                            \$data = \$this->getJsonInput();
                            \$errors = \$this->getValidationErrors(\$data, false);
                        
                            if (!empty(\$errors)) {
                                \$this->respondUnprocessableEntity(\$errors);
                                return;
                            }
                        
                            try {
                                \$this->gateway->update(\$id, \$data);
                                echo json_encode(["success" => "Entity updated!", "id" => \$id]);
                            } catch (Exception \$e) {
                                \$this->respondInternalError(\$e->getMessage());
                            }
                            break;
                        
                        case "DELETE":
                            try {
                                \$this->gateway->delete(\$id);
                                echo json_encode(["success" => "Entity deleted!", "id" => \$id]);
                            } catch (Exception \$e) {
                                \$this->respondInternalError(\$e->getMessage());
                            }
                            break;
                        
                        default:
                            \$this->respondMethodNotAllowed("GET, PATCH, DELETE");
                    }
                }
            }
            
            /*
            * Validates input data for creation or update.
            * Simple checks for required fields.
            */
            private function getValidationErrors(array \$data, bool \$is_new = true): array
            {
                \$errors = [];
                        
                if (\$is_new && empty(\$data['entity'])) {
                    \$errors[] = "Entity is required.";
                }
                        
                return \$errors;
            }
        }
        PHP;
    
        file_put_contents($controllerFile, $content);
    
        echo "Controller created: controllers/{$controllerName}.php\n";
        break;
    
    case 'create:gateway':
        /*
        |------------------------------------------------------------------
        | Create a New Gateway File
        |------------------------------------------------------------------
        | This command scaffolds a new gateway in the 'gateways' folder 
        | with a basic structure. It ensures the file doesn't already exist.
        |
        | Usage:
        | php lite create:gateway TaskGateway
        */
        $gatewayName = $argv[2] ?? null;
        
        if (!$gatewayName) {
            echo "Error: You must specify a gateway name.\n";
            echo "Example: php lite create:gateway TaskGateway\n";
            return;
        }
        
        // Ensure the gateway ends with 'Gateway'
        if (!str_ends_with($gatewayName, 'Gateway')) {
            $gatewayName .= 'Gateway';
        }
        
        $gatewaysDir = __DIR__ . '/gateways';
        $gatewayFile = "$gatewaysDir/{$gatewayName}.php";
        
        if (!file_exists($gatewaysDir)) {
            mkdir($gatewaysDir, 0755, true);
        }
        
        if (file_exists($gatewayFile)) {
            echo "Error: Gateway '$gatewayName' already exists.\n";
            return;
        }
        
        // Generate boilerplate gateway content
        $content = <<<PHP
        <?php
        require_once __DIR__ . "/../bootstrap.php";
        
        class {$gatewayName} 
        {
            private PDO \$conn;
        
            public function __construct(Database \$database) 
            {
                \$this->conn = \$database->getConnect();
            }
        
            /**
            * Get all records
            * @return array
            */
            public function getAll(): array 
            {
                \$sql = "SELECT * FROM `TABLE_NAME`";
        
                \$stmt = \$this->conn->query(\$sql);
        
                \$data = [];
        
                while (\$row = \$stmt->fetch(PDO::FETCH_ASSOC)) {
                    \$data[] = \$row;
                }
        
                return \$data;
            }
        
            /**
            * Get a specific record by ID
            * @param string \$id
            * @return array|false
            */
            public function get(string \$id): array|false 
            {
                \$sql = "SELECT * FROM `TABLE_NAME` WHERE id = :id";
        
                \$stmt = \$this->conn->prepare(\$sql);
                \$stmt->bindValue(":id", \$id, PDO::PARAM_INT);
                \$stmt->execute();
        
                return \$stmt->fetch(PDO::FETCH_ASSOC);
            }
        
            /**
            * Create a new record
            * @param array \$data
            * @return string
            */
            public function create(array \$data): string 
            {
                \$sql = "INSERT INTO `TABLE_NAME` 
                    (/* entity fields */) 
                    VALUES 
                    (/* :bindings */)";
        
                \$stmt = \$this->conn->prepare(\$sql);
        
                // Bind values (example placeholders)
                // \$stmt->bindValue(':field', \$data['field'], PDO::PARAM_STR);
        
                \$stmt->execute();
        
                return \$this->conn->lastInsertId();
            }
        
            /**
            * Update an existing record
            * @param string \$id
            * @param array \$data
            * @return void
            */
            public function update(string \$id, array \$data): void 
            {
                try {
                    \$sql = "UPDATE `TABLE_NAME` SET 
                        /* field1 = :field1, field2 = :field2 */ 
                        WHERE id = :id";
            
                    \$stmt = \$this->conn->prepare(\$sql);
        
                    // Bind values (example placeholders)
                    // \$stmt->bindValue(':field', \$data['field'], PDO::PARAM_STR);
                    \$stmt->bindValue(':id', \$id, PDO::PARAM_INT);
        
                    \$stmt->execute();
            
                    if (\$stmt->rowCount() === 0) {
                        throw new Exception("Record with ID \$id not found or no changes made.");
                    }
        
                    http_response_code(200);
                    echo json_encode(["success" => "Record updated!", "id" => \$id]);
            
                } catch (Exception \$e) {
                    http_response_code(400);
                    echo json_encode(["error" => \$e->getMessage()]);
                }
            }
        
            /**
            * Delete a specific record by ID
            * @param string \$id
            * @return void
            */
            public function delete(string \$id): void 
            {
                \$sql = "DELETE FROM `TABLE_NAME` WHERE id = :id";
        
                \$stmt = \$this->conn->prepare(\$sql);
                \$stmt->bindValue(":id", \$id, PDO::PARAM_INT);
        
                \$stmt->execute();
        
                if (\$stmt->rowCount() === 0) {
                    throw new Exception("Record with ID \$id not found.");
                }
            }
        }
        
        PHP;
        
        // Write the content to the gateway file
        file_put_contents($gatewayFile, $content);
        
        echo "Gateway '$gatewayName' created successfully!\n";
        break;
        



    default:
        /*
        |------------------------------------------------------------------
        | Display Available Commands
        |------------------------------------------------------------------
        | If no command is provided or an invalid command is entered, this 
        | section will output the list of available commands for the user.
        */
        echo "Available commands:\n";
        echo "start   Start the PHP development server\n";
        echo "key:generate   Generate a new JWT_SECRET key in .env file\n";
        echo "create:controller   Create a new controller file\n";
        break;
}
