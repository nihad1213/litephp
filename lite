#!/usr/bin/env php
<?php

/*
|----------------------------------------------------------------------
| Lightweight CLI Tool for PHP Server & Custom Commands
|----------------------------------------------------------------------
| This script provides a simple command-line interface (CLI) for managing
| various PHP development tasks. It currently supports the `start` command,
| which launches a PHP built-in server, but additional commands can be easily
| added for other development tasks.
|
| Commands can be run with the following format:
| 
| php lite <command>
|
| Created by: Nihad Namatli
|----------------------------------------------------------------------
*/

/*
|----------------------------------------------------------------------
| Change the Current Working Directory
|----------------------------------------------------------------------
| Ensures the script always runs from the directory where it is located.
| This is useful for resolving relative paths such as 'api', ensuring
| consistency when the script is run from different locations.
*/
chdir(__DIR__);

/*
|----------------------------------------------------------------------
| Get Command-Line Arguments
|----------------------------------------------------------------------
| The first argument (`$argv[1]`) will determine which command to execute.
| If no command is passed, the script will display a list of available 
| commands.
*/
$command = $argv[1] ?? null;

/*
|----------------------------------------------------------------------
| Switch on Command
|----------------------------------------------------------------------
| Depending on the command passed, the script will call 
| the corresponding function.
*/
switch ($command) {
    case 'start':
        /*
        |------------------------------------------------------------------
        | Start PHP Built-in Server
        |------------------------------------------------------------------
        | This command launches the built-in PHP development server, serving 
        | files from the 'api' directory.Once the server is started, the user
        | is prompted with instructions to stop it using Ctrl+C.
        */
        echo "Starting the server at http://localhost:8000...\n";
        echo "Press Ctrl+C to stop the server.\n\n";

        $cmd = 'php -S localhost:8000 -t api'; // Modify this path if needed
        passthru($cmd);
        break;

    case 'key:generate':
        /*
        |------------------------------------------------------------------
        | Generate a New JWT_SECRET Key in .env file
        |------------------------------------------------------------------
        | This command generates a new JWT_SECRET key and outputs it to the 
        | console. The key is typically used for encryption and security 
        | purposes in PHP applications.
        */
        $envFile = __DIR__ . '/.env';
    
        // Check if .env file exists
        if (!file_exists($envFile)) {
            echo ".env file not found. Run: cp .env.example .env\n";
            return;
        }
    
        // Read current contents of .env
        $envContent = file_get_contents($envFile);
    
        // Generate a new JWT secret (32 bytes = 64 hex characters)
        $key = bin2hex(random_bytes(32));
    
        // Check how JWT_SECRET is currently defined in the file
        if (preg_match('/^JWT_SECRET\s*=\s*([^#\r\n]+)/m', $envContent, $matches)) {
            // JWT_SECRET exists with a non-empty value (not a comment, not empty)
            $existingKey = trim($matches[1]);
            
            if (!empty($existingKey)) {
                // Only prompt for confirmation if there's an actual value
                echo "JWT_SECRET is already defined: $existingKey\n";
                echo "Do you want to overwrite it? (yes/no): ";
                $handle = fopen("php://stdin", "r");
                $line = trim(fgets($handle));
                fclose($handle);
    
                if (strtolower($line) !== 'yes') {
                    echo "Aborted. JWT_SECRET not changed.\n";
                    return;
                }
            }
        }
    
        // Update or insert JWT_SECRET based on its current status
        if (preg_match('/^JWT_SECRET\s*=\s*$/m', $envContent) || 
            preg_match('/^JWT_SECRET\s*=\s*#/m', $envContent)) {
            // JWT_SECRET exists but is empty or has a comment, replace without asking
            $envContent = preg_replace('/^JWT_SECRET\s*=.*$/m', 'JWT_SECRET=' . $key, $envContent);
        } else if (preg_match('/^JWT_SECRET\s*=/m', $envContent)) {
            // JWT_SECRET exists with some value (and we've already confirmed overwrite)
            $envContent = preg_replace('/^JWT_SECRET\s*=.*$/m', 'JWT_SECRET=' . $key, $envContent);
        } else {
            // JWT_SECRET doesn't exist at all, add it to the end of the file
            $envContent .= "\nJWT_SECRET=" . $key . "\n";
        }
    
        // Save updated contents back to .env
        file_put_contents($envFile, $envContent);
    
        echo "JWT_SECRET updated successfully!\n";
        echo "New key: $key\n";
    
        break;
    
    case 'create:controller':
        /*
        |------------------------------------------------------------------
        | Create a New Controller File
        |------------------------------------------------------------------
        | This command scaffolds a new controller in the 'controllers' folder 
        | with a basic structure. It ensures the file doesn't already exist.
        |
        | Usage:
        | php lite create:controller TestController
        */
        $controllerName = $argv[2] ?? null;
    
        if (!$controllerName) {
            echo "Error: You must specify a controller name.\n";
            echo "Example: php lite create:controller TaskController\n";
            return;
        }
    
        // Ensure the controller ends with 'Controller'
        if (!str_ends_with($controllerName, 'Controller')) {
            $controllerName .= 'Controller';
        }
    
        $controllersDir = __DIR__ . '/controllers';
        $controllerFile = "$controllersDir/{$controllerName}.php";
    
        if (!file_exists($controllersDir)) {
            mkdir($controllersDir, 0755, true);
        }
    
        if (file_exists($controllerFile)) {
            echo "Error: Controller '$controllerName' already exists.\n";
            return;
        }
    
        // Generate boilerplate controller content
        $content = <<<PHP
            <?php

            require_once __DIR__ . "/../api/bootstrap.php";

            class {$controllerName} extends BaseController
            {
                /**
                 * Constructor
                 * 
                 * @param {gatewayName} \$gateway The gateway for database operations
                 */
                public function __construct(private /*{gatewayName}*/ \$gateway) {}

                /**
                 * Get all records
                 */
                #[Route(path: '{route}', method: 'GET')]
                public function getAll(): void
                {
                    echo json_encode(\$this->gateway->getAll());
                }

                /**
                 * Get a specific record by ID
                 */
                #[Route(path: '{route}/{id}', method: 'GET')]
                public function getOne(string \$id): void
                {
                    \$resource = \$this->gateway->get(\$id);

                    if (!\$resource) {
                        \$this->respondNotFound(\$id);
                        return;
                    }

                    echo json_encode(\$resource);
                }

                /**
                 * Create a new record
                 */
                #[Route(path: '{route}', method: 'POST')]
                public function create(): void
                {
                    \$data = \$this->getJsonInput();
                    \$errors = \$this->getValidationErrors(\$data);

                    if (!empty(\$errors)) {
                        \$this->respondUnprocessableEntity(\$errors);
                        return;
                    }

                    \$id = \$this->gateway->create(\$data);
                    \$this->respondCreated(\$id);
                }

                /**
                 * Update an existing record
                 */
                #[Route(path: '{route}/{id}', method: 'PATCH')]
                public function update(string \$id): void
                {
                    \$resource = \$this->gateway->get(\$id);

                    if (!\$resource) {
                        \$this->respondNotFound(\$id);
                        return;
                    }

                    \$data = \$this->getJsonInput();
                    \$errors = \$this->getValidationErrors(\$data, false);

                    if (!empty(\$errors)) {
                        \$this->respondUnprocessableEntity(\$errors);
                        return;
                    }

                    try {
                        \$this->gateway->update(\$id, \$data);
                        echo json_encode(["success" => "Entity updated!", "id" => \$id]);
                    } catch (\Exception \$e) {
                        \$this->respondInternalError(\$e->getMessage());
                    }
                }

                /**
                 * Delete an existing record
                 */
                #[Route(path: '{route}/{id}', method: 'DELETE')]
                public function delete(string \$id): void
                {
                    \$resource = \$this->gateway->get(\$id);

                    if (!\$resource) {
                        \$this->respondNotFound(\$id);
                        return;
                    }

                    try {
                        \$this->gateway->delete(\$id);
                        echo json_encode(["success" => "Entity deleted!", "id" => \$id]);
                    } catch (\Exception \$e) {
                        \$this->respondInternalError(\$e->getMessage());
                    }
                }

                /**
                 * Validates input data
                 */
                private function getValidationErrors(array \$data, bool \$is_new = true): array
                {
                    \$errors = [];

                    if (\$is_new && empty(\$data['entity'])) {
                        \$errors[] = "Entity is required.";
                    }

                    return \$errors;
                }
            }
            PHP;
    
        file_put_contents($controllerFile, $content);
    
        echo "Controller created: controllers/{$controllerName}.php\n";
        break;
    
    case 'create:gateway':
        /*
        |------------------------------------------------------------------
        | Create a New Gateway File
        |------------------------------------------------------------------
        | This command scaffolds a new gateway in the 'gateways' folder 
        | with a basic structure. It ensures the file doesn't already exist.
        |
        | Usage:
        | php lite create:gateway TaskGateway
        */
        $gatewayName = $argv[2] ?? null;
        
        if (!$gatewayName) {
            echo "Error: You must specify a gateway name.\n";
            echo "Example: php lite create:gateway TaskGateway\n";
            return;
        }
        
        // Ensure the gateway ends with 'Gateway'
        if (!str_ends_with($gatewayName, 'Gateway')) {
            $gatewayName .= 'Gateway';
        }
        
        $gatewaysDir = __DIR__ . '/gateways';
        $gatewayFile = "$gatewaysDir/{$gatewayName}.php";
        
        if (!file_exists($gatewaysDir)) {
            mkdir($gatewaysDir, 0755, true);
        }
        
        if (file_exists($gatewayFile)) {
            echo "Error: Gateway '$gatewayName' already exists.\n";
            return;
        }
        
        // Generate boilerplate gateway content
        $content = <<<PHP
            <?php

            class {$gatewayName}
            {
                private PDO \$conn;

                public function __construct(Database \$database)
                {
                    \$this->conn = \$database->getConnect();
                }

                /**
                 * Get all records
                 * @return array
                 */
                public function getAll(): array
                {
                    \$sql = "SELECT * FROM `{tablename}`";

                    \$stmt = \$this->conn->query(\$sql);
                    \$data = [];

                    while (\$row = \$stmt->fetch(PDO::FETCH_ASSOC)) {
                        \$data[] = \$row;
                    }

                    return \$data;
                }

                /**
                 * Get a specific record by ID
                 * @param string \$id
                 * @return array|false
                 */
                public function get(string \$id): array|false
                {
                    \$sql = "SELECT * FROM `{tablename}` WHERE id = :id";

                    \$stmt = \$this->conn->prepare(\$sql);
                    \$stmt->bindValue(":id", \$id, PDO::PARAM_INT);
                    \$stmt->execute();

                    return \$stmt->fetch(PDO::FETCH_ASSOC);
                }

                /**
                 * Create a new record
                 * @param array \$data
                 * @return string
                 */
                public function create(array \$data): string
                {
                    \$fields = [];
                    \$placeholders = [];
                    \$values = [];

                    foreach (\$data as \$field => \$value) {
                        if (\$field !== 'id') {
                            \$fields[] = \$field;
                            \$placeholders[] = ":{\$field}";
                            \$values[":{\$field}"] = \$value;
                        }
                    }

                    \$sql = sprintf(
                        "INSERT INTO `{tablename}` (%s) VALUES (%s)",
                        implode(', ', \$fields),
                        implode(', ', \$placeholders)
                    );

                    \$stmt = \$this->conn->prepare(\$sql);

                    foreach (\$values as \$placeholder => \$value) {
                        \$paramType = is_int(\$value) ? PDO::PARAM_INT : PDO::PARAM_STR;
                        \$stmt->bindValue(\$placeholder, \$value, \$paramType);
                    }

                    \$stmt->execute();

                    return \$this->conn->lastInsertId();
                }

                /**
                 * Update an existing record
                 * @param string \$id
                 * @param array \$data
                 * @return void
                 * @throws Exception
                 */
                public function update(string \$id, array \$data): void
                {
                    \$fields = [];
                    \$values = [];

                    foreach (\$data as \$field => \$value) {
                        if (\$field !== 'id') {
                            \$fields[] = "\$field = :\$field";
                            \$values[":\$field"] = \$value;
                        }
                    }

                    \$values[":id"] = \$id;

                    \$sql = sprintf(
                        "UPDATE `{tablename}` SET %s WHERE id = :id",
                        implode(', ', \$fields)
                    );

                    \$stmt = \$this->conn->prepare(\$sql);

                    foreach (\$values as \$placeholder => \$value) {
                        \$paramType = is_int(\$value) ? PDO::PARAM_INT : PDO::PARAM_STR;
                        \$stmt->bindValue(\$placeholder, \$value, \$paramType);
                    }

                    \$stmt->execute();

                    if (\$stmt->rowCount() === 0) {
                        throw new Exception("Record with ID \$id not found or no changes made.");
                    }
                }

                /**
                 * Delete a specific record by ID
                 * @param string \$id
                 * @return void
                 * @throws Exception
                 */
                public function delete(string \$id): void
                {
                    \$sql = "DELETE FROM `{tablename}` WHERE id = :id";

                    \$stmt = \$this->conn->prepare(\$sql);
                    \$stmt->bindValue(":id", \$id, PDO::PARAM_INT);
                    \$stmt->execute();

                    if (\$stmt->rowCount() === 0) {
                        throw new Exception("Record with ID \$id not found.");
                    }
                }
            }
            PHP;

        
        // Write the content to the gateway file
        file_put_contents($gatewayFile, $content);
        
        echo "Gateway '$gatewayName' created successfully!\n";
        break;
        



    default:
        /*
        |------------------------------------------------------------------
        | Display Available Commands
        |------------------------------------------------------------------
        | If no command is provided or an invalid command is entered, this 
        | section will output the list of available commands for the user.
        */
        echo "Available commands:\n";
        echo "start   Start the PHP development server\n";
        echo "key:generate   Generate a new JWT_SECRET key in .env file\n";
        echo "create:controller   Create a new controller file\n";
        echo "create:gateway   Create a new gateway file\n";
        break;
}
